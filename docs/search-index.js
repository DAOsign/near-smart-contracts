var searchIndex = new Map(JSON.parse('[\
["daosign_eip712",{"doc":"","t":"SFFKNNNNNONNNNNNNNNNNNMNNHNNNOMNNHNNNNHNNNNNNNOONNN","n":["CONTRACT_SOURCE_METADATA","EIP712Domain","EIP712DomainExt","Packable","__clone_box","borrow","borrow","borrow_mut","borrow_mut","chain_id","clone","clone_into","contract_source_metadata","contract_source_metadata","default","deserialize","deserialize_reader","eq","ext","fmt","from","from","get_greeting","get_greeting","get_greeting","hash","into","into","json_schema","name","pack","pack","pack","recover","schema_id","schema_name","serialize","serialize","sha3","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifying_contract","version","with_attached_deposit","with_static_gas","with_unused_gas_weight"],"q":[[0,"daosign_eip712"],[51,"dyn_clone::sealed"],[52,"near_sdk::promise"],[53,"core::result"],[54,"serde::de"],[55,"std::io::error"],[56,"std::io"],[57,"near_account_id::account_id"],[58,"core::fmt"],[59,"core::fmt"],[60,"schemars::gen"],[61,"schemars::schema"],[62,"alloc::vec"],[63,"alloc::borrow"],[64,"serde::ser"],[65,"std::io"],[66,"near_token"],[67,"near_gas"]],"d":["","","","","","","","","","","","","","","","","","","API for calling this contract’s functions in a …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,3,4,3,4,3,3,3,3,4,3,3,3,3,3,3,3,4,3,14,4,3,0,4,3,3,3,14,4,3,0,3,3,3,3,0,3,4,3,4,3,4,3,3,3,4,4,4],"f":"````{{cb}d{}}{ce{}{}}000`{ff}{{ce}d{}{}}{hj}{{}d}{{}f}{c{{l{f}}}n}{c{{l{fA`}}}Ab}{{ff}Ad}{Afh}{{fAh}Aj}{cc{}}0{AlAn}9{fAn}{Al{{Bb{B`}}}}>>{BdBf}`{Al{{Bh{B`}}}}={f{{Bh{B`}}}}{{fAl{Bb{B`}}}{{l{{Bb{B`}}A`}}}}{{}{{Bl{Bj}}}}{{}An}{{fc}lBn}{{fc}{{l{dA`}}}C`}{{{Cb{B`}}}{{Bb{B`}}}}{ce{}{}}{c{{l{e}}}{}{}}000{cCd{}}0``{{hCf}h}{{hCh}h}{{hCj}h}","c":[],"p":[[5,"Private",51],[1,"unit"],[5,"EIP712Domain",0],[5,"EIP712DomainExt",0],[5,"Promise",52],[6,"Result",53],[10,"Deserializer",54],[5,"Error",55],[10,"Read",56],[1,"bool"],[5,"AccountId",57],[5,"Formatter",58],[8,"Result",58],[10,"Packable",0],[5,"String",59],[1,"u8"],[1,"array"],[5,"SchemaGenerator",60],[6,"Schema",61],[5,"Vec",62],[1,"str"],[6,"Cow",63],[10,"Serializer",64],[10,"Write",56],[1,"slice"],[5,"TypeId",65],[5,"NearToken",66],[5,"NearGas",67],[1,"u64"]],"b":[[36,"impl-Serialize-for-EIP712Domain"],[37,"impl-BorshSerialize-for-EIP712Domain"]]}],\
["daosign_proof_of_agreement",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["daosign_proof_of_authority",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["daosign_proof_of_signature",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["k256",{"doc":"RustCrypto: secp256k1 (K-256) elliptic curve","t":"FIIITTTTITFIFFIIITNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFTFIIINNNNNNNNNNNNNNNCNNNNNNNENNNNNNNNNNNNNRKKKHHNNNHN","n":["AffinePoint","CompressedPoint","EncodedPoint","FieldBytes","GENERATOR","GENERATOR","IDENTITY","IDENTITY","NonZeroScalar","ONE","ProjectivePoint","PublicKey","Scalar","Secp256k1","SecretKey","U256","WideBytes","ZERO","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_ref","batch_invert","batch_normalize","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","conditional_negate","conditional_negate","conditional_select","conditional_select","conditional_select","ct_eq","ct_eq","ct_eq","decode_field_bytes","decompact","decompress","default","default","default","default","double","double","double","ecdsa","elliptic_curve","encode_field_bytes","endomorphism","eq","eq","eq","eq","eq","eq","eq_affine","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_unchecked","from_bytes_unchecked","from_encoded_point","from_encoded_point","from_repr","from_uint_unchecked","generate_biased","generate_vartime","generator","generator","generator","identity","identity","identity","into","into","into","into","invert","invert","invert","invert_vartime","is_high","is_identity","is_identity","is_odd","is_zero","lincomb","lincomb_ext","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_by_generator","neg","neg","neg","neg","neg","negate","partial_cmp","partial_cmp","product","product","random","random","reduce","reduce","reduce_bytes","reduce_bytes","reduce_nonzero","reduce_nonzero","reduce_nonzero_bytes","reduce_nonzero_bytes","sha2","shr","shr","shr_assign","shr_vartime","sqrt","sqrt_ratio","square","square","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_affine","to_affine","to_bytes","to_bytes","to_bytes","to_curve","to_encoded_point","to_encoded_point","to_owned","to_owned","to_owned","to_owned","to_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_sign_prehashed","type_id","type_id","type_id","type_id","validate_public_key","verify_prehashed","x","y_is_odd","zeroize","zeroize","zeroize","DerSignature","Error","MAX","RecoveryId","Signature","SigningKey","VerifyingKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","fmt","from","from","from_byte","hazmat","into","into","is_x_reduced","is_y_odd","new","new","partial_cmp","signature","to_byte","to_owned","to_string","trial_recovery_from_digest","trial_recovery_from_msg","trial_recovery_from_prehash","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Digest","DigestPrimitive","SignPrimitive","VerifyPrimitive","bits2field","sign_prehashed","try_sign_prehashed","try_sign_prehashed_rfc6979","verify_digest","verify_prehashed","verify_prehashed"],"q":[[0,"k256"],[245,"k256::ecdsa"],[289,"k256::ecdsa::hazmat"],[300,"subtle"],[301,"core::cmp"],[302,"subtle"],[303,"core::fmt"],[304,"rand_core"],[305,"rand_core"],[306,"core::iter::traits::iterator"],[307,"crypto_bigint::uint"],[308,"elliptic_curve::error"],[309,"core::result"],[310,"core::convert"],[311,"elliptic_curve::ops"],[312,"core::any"],[313,"elliptic_curve::secret_key"],[314,"sec1::point"],[315,"elliptic_curve::error"],[316,"ecdsa::verifying"],[317,"ecdsa"],[318,"elliptic_curve"],[319,"elliptic_curve::arithmetic"],[320,"digest::digest"],[321,"generic_array"],[322,"digest"]],"d":["secp256k1 curve point expressed in affine coordinates.","Compressed SEC1-encoded secp256k1 (K-256) curve point.","SEC1-encoded secp256k1 (K-256) curve point.","secp256k1 (K-256) field element serialized as bytes.","Base point of secp256k1.","Base point of secp256k1.","Additive identity of the group: the point at infinity.","Additive identity of the group: the point at infinity.","Non-zero secp256k1 (K-256) scalar field element.","Multiplicative identity.","A point on the secp256k1 curve in projective coordinates.","secp256k1 (K-256) public key.","Scalars are elements in the finite field modulo n.","secp256k1 (K-256) elliptic curve.","secp256k1 (K-256) secret key.","256-bit unsigned big integer.","Bytes used by a wide reduction: twice the width of …","Zero scalar.","","","","","","","","","","Returns self + rhs mod n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Doubles this point.","","Elliptic Curve Digital Signature Algorithm (ECDSA).","","","Calculates SECP256k1 endomorphism: <code>self * lambda</code>.","","","","","","","Check whether <code>self</code> is equal to an affine point.","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Attempts to parse the given <code>EncodedPoint</code> as an …","","Attempts to parse the given byte array as an SEC1-encoded …","","Returns a (nearly) uniformly-random scalar, generated in …","Returns a uniformly-random scalar, generated using …","Returns the base point of secp256k1.","Returns the base point of SECP256k1.","","Returns the identity of the group: the point at infinity.","Returns the additive identity of SECP256k1, also known as …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Inverts the scalar.","Fast variable-time inversion using Stein’s algorithm.","","Is this point the identity point?","","","Checks if the scalar is zero.","","","","","","","","","","","Modulo multiplies two scalars.","","","","","Calculates <code>k * G</code>, where <code>G</code> is the generator.","","","","","","Negates the scalar.","","","","","","","","","","","","","","","","","","","Right shifts the scalar.","Tonelli-Shank’s algorithm for q mod 16 = 1 …","","","Modulo squares the scalar.","","","","","","","","","","Returns self - rhs mod n.","","","","","","","","","","","Returns the affine representation of this point.","","","","Returns the SEC1 encoding of this scalar.","Convert to curve representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ECDSA/secp256k1 signature (ASN.1 DER encoded)","Signature errors.","Maximum supported value for the recovery ID (inclusive).","Recovery IDs, a.k.a. “recid”.","ECDSA/secp256k1 signature (fixed-size)","ECDSA/secp256k1 signing key","ECDSA/secp256k1 verification key (i.e. public key)","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert a <code>u8</code> into a <code>RecoveryId</code>.","Low-level ECDSA primitives.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Did the affine x-coordinate of 𝑘×𝑮 overflow the …","Is the affine y-coordinate of 𝑘×𝑮 odd?","Create a new error with no associated source","Create a new <code>RecoveryId</code> from the following 1-bit arguments:","","","Convert this <code>RecoveryId</code> into a <code>u8</code>.","","","Given a public key, message digest, and signature, use …","Given a public key, message, and signature, use trial …","Given a public key, message digest, and signature, use …","","","","","","","","Preferred digest to use when computing ECDSA signatures …","Bind a preferred <code>Digest</code> algorithm to an elliptic curve …","Try to sign the given prehashed message using ECDSA.","Verify the given prehashed message using ECDSA.","Partial implementation of the <code>bits2int</code> function as defined …","Sign a prehashed message digest using the provided secret …","Try to sign the prehashed message.","Try to sign the given message digest deterministically …","Verify message digest against the provided signature.","Verify the prehashed message against the provided ECDSA …","Verify the prehashed message against the provided ECDSA …"],"i":[0,0,0,0,2,1,2,1,0,3,0,0,0,0,0,0,0,3,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,3,3,3,3,1,2,1,3,7,2,1,3,7,2,1,3,7,2,1,3,7,3,7,1,3,2,1,3,2,1,3,11,2,2,2,1,3,7,1,1,3,0,0,11,1,2,2,1,1,3,7,1,2,1,3,7,15,15,10,10,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,7,11,11,2,1,2,1,2,1,3,3,3,3,2,1,1,2,1,1,2,1,3,7,3,3,3,3,3,2,1,3,3,1,1,2,2,1,1,1,3,3,3,3,1,1,3,3,1,2,1,1,3,3,3,3,7,3,3,1,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,3,1,1,1,1,3,3,1,1,3,3,1,1,2,1,3,2,2,1,2,1,3,7,3,16,16,16,16,2,2,2,1,3,7,2,1,3,7,3,2,1,3,7,7,2,2,2,2,1,3,0,0,33,0,0,0,0,34,33,34,33,33,33,33,34,33,34,34,33,34,33,33,0,34,33,33,33,34,33,33,0,33,33,34,33,33,33,34,33,33,34,33,34,33,51,0,0,0,0,0,53,53,55,0,55],"f":"``````````````````{{bb}b}{{bd}b}1001{{ff}f}0000{{bd}h}{{bb}h}10{{ff}h}0{ff}{{{j{c}}}{{l{{j{c}}}}}{}}{{{j{b}}}{{j{c}}}{}}{ce{}{}}0000000{dd}{bb}5{nn}{{ce}h{}{}}000{{ff}A`}{{nn}A`}{{cAb}h{}}0{{ddAb}d}{{bbAb}b}{{ffAb}f}{{dd}Ab}{{bb}Ab}{{ff}Ab}{AdAf}{Ad{{l{d}}}}{{AdAb}{{l{d}}}}{{}d}{{}b}{{}f}{{}n}{bb}0{ff}``{AfAd}2{{db}Ah}{{dd}Ah}{{bd}Ah}{{bb}Ah}{{ff}Ah}{{nn}Ah}{{bd}Ab}{{dAj}Al}{{bAj}Al}{{fAj}Al}{{nAj}Al}{dAn}0{fAd}0{bd}0{cc{}}{B`d}0{B`b}20{db}0{Bbf}{Bdf}{Bff}6{{{Bh{n}}}f}07{fAf}0{c{{l{d}}}{}}{c{{l{b}}}{}}10{An{{l{d}}}}{An{{l{b}}}}{Ad{{l{f}}}}{cf{}}{cfBj}{cfBl}{{}d}{{}b}0100{ce{}{}}000{f{{l{f}}}}000{fAb}{dAb}{bAb}22{{cc}c{}}{{{j{{Bn{bf}}}}}b}{{df}b}0{{bf}b}00{{ff}f}000{{bf}h}0{{ff}h}0{fb}{dc{}}{bb}0{ff}00{{ff}{{C`{A`}}}}{{nn}{{C`{A`}}}}{cf{{Cd{}{{Cb{f}}}}}}0{cbBl}{cfBl}{Cff}{Aff}{Chf}{Adf}2301`{{fCj}c{}}0{{fCj}h}{{fCj}f}{f{{l{f}}}}{{ff}{{Bn{Abf}}}}>>{{bd}b}00{{bb}b}00{{ff}f}000{{bb}h}{{bd}h}10{{ff}h}0{cb{{Cd{}{{Cb{b}}}}}}0{cf{{Cd{}{{Cb{f}}}}}}0{bd}0{dc{}}{bc{}}{fAd}{db}{{dAh}An}{{bAh}An}{ce{}{}}0004{d{{Cl{B`}}}}0{b{{Cl{B`}}}}0{c{{Cn{e}}}{}{}}{An{{Cl{d}}}}01111111{{fcAd}{{Cn{{Bn{D`{C`{Db}}}}Dd}}}{{Df{f}}{Dj{}{{Dh{{l{f}}}}}}}}{cDl{}}000{{{Dn{c}}E`}{{Cn{hEb}}}{}}{{dAdD`}{{Cn{hDd}}}}{dAd}{dAb}{ch{}}00```````;;;;{DbDb}{{ce}h{}{}}{{DbDb}A`}{{}Dd}{{DbDb}Ah}{{DdAj}{{Cn{hEd}}}}0{{DbAj}{{Cn{hEd}}}}{cc{}}0{Ef{{C`{Db}}}}`{ce{}{}}0{DbAh}07{{AhAh}Db}{{DbDb}{{C`{A`}}}}`{DbEf}4{cEh{}}{{{Ej{c}}e{El{c}}}{{Cn{DbDd}}}{EnF`}Fb}{{{Ej{c}}{Fd{Ef}}{El{c}}}{{Cn{DbDd}}}{FfEnF`}}{{{Ej{c}}{Fd{Ef}}{El{c}}}{{Cn{DbDd}}}{EnF`}}{c{{Cn{e}}}{}{}}{Ef{{Cn{DbDd}}}}111{cDl{}}0````{{{Fd{Ef}}}{{Cn{{Fh{Ef}}Dd}}}}{{c{Fh{Ef}}}{{Cn{{Bn{{El{e}}Db}}Dd}}}{Df{Dj{}{{Dh{l}}}}}{EnF`}}{{Fjc{Fh{Ef}}}{{Cn{{Bn{{El{e}}{C`{Db}}}}Dd}}}{{Df{Fj}}{Dj{}{{Dh{{l{Fj}}}}}}}{En{F`{}{{Fl{Fj}}}}}}{{Fj{Fh{Ef}}{Fd{Ef}}}{{Cn{{Bn{{El{c}}{C`{Db}}}}Dd}}}{En{F`{}{{Fl{Fj}}}}}}{{Fnc{El{e}}}{{Cn{hDd}}}{{Gb{}{{G`{}}}}}{En{F`{}{{Gd{Fn}}}}}}{{{Fh{Ef}}{El{c}}}{{Cn{hDd}}}{EnF`}}{{Fn{Fh{Ef}}{El{c}}}{{Cn{hDd}}}{En{F`{}{{Gd{Fn}}}}}}","c":[123,126],"p":[[5,"ProjectivePoint",0],[5,"AffinePoint",0],[5,"Scalar",0],[1,"unit"],[1,"array"],[5,"CtOption",300],[5,"Secp256k1",0],[6,"Ordering",301],[5,"Choice",300],[8,"FieldBytes",0],[8,"U256",0],[1,"bool"],[5,"Formatter",302],[8,"Result",302],[8,"EncodedPoint",0],[8,"PublicKey",0],[1,"u128"],[1,"u64"],[1,"u32"],[5,"ScalarPrimitive",303],[10,"CryptoRngCore",304],[10,"RngCore",304],[1,"tuple"],[6,"Option",305],[17,"Item"],[10,"Iterator",306],[8,"U512",307],[8,"WideBytes",0],[1,"usize"],[8,"Result",308],[6,"Result",309],[8,"Signature",245],[5,"RecoveryId",245],[5,"Error",245],[10,"AsRef",310],[17,"Output"],[10,"Invert",311],[5,"TypeId",312],[5,"SecretKey",313],[5,"EncodedPoint",314],[5,"Error",308],[5,"Error",302],[1,"u8"],[5,"String",315],[5,"VerifyingKey",316],[5,"Signature",317],[10,"PrimeCurve",318],[10,"CurveArithmetic",319],[10,"Digest",320],[1,"slice"],[10,"DigestPrimitive",289],[5,"GenericArray",321],[10,"SignPrimitive",289],[17,"Scalar"],[10,"VerifyPrimitive",289],[17,"OutputSize"],[10,"FixedOutput",322],[17,"AffinePoint"]],"b":[[18,"impl-Add-for-ProjectivePoint"],[19,"impl-Add%3CAffinePoint%3E-for-ProjectivePoint"],[20,"impl-Add%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[21,"impl-Add%3C%26AffinePoint%3E-for-ProjectivePoint"],[22,"impl-Add%3C%26AffinePoint%3E-for-%26ProjectivePoint"],[23,"impl-Add%3C%26ProjectivePoint%3E-for-%26ProjectivePoint"],[24,"impl-Add-for-Scalar"],[25,"impl-Add%3C%26Scalar%3E-for-Scalar"],[26,"impl-Add%3C%26Scalar%3E-for-%26Scalar"],[27,"impl-Scalar"],[28,"impl-Add%3CScalar%3E-for-%26Scalar"],[29,"impl-AddAssign%3CAffinePoint%3E-for-ProjectivePoint"],[30,"impl-AddAssign-for-ProjectivePoint"],[31,"impl-AddAssign%3C%26AffinePoint%3E-for-ProjectivePoint"],[32,"impl-AddAssign%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[33,"impl-AddAssign-for-Scalar"],[34,"impl-AddAssign%3C%26Scalar%3E-for-Scalar"],[71,"impl-Group-for-ProjectivePoint"],[72,"impl-ProjectivePoint"],[78,"impl-PartialEq%3CProjectivePoint%3E-for-AffinePoint"],[79,"impl-PartialEq-for-AffinePoint"],[80,"impl-PartialEq%3CAffinePoint%3E-for-ProjectivePoint"],[81,"impl-PartialEq-for-ProjectivePoint"],[89,"impl-From%3C%26AffinePoint%3E-for-EncodedPoint%3C%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E"],[90,"impl-From%3CAffinePoint%3E-for-EncodedPoint%3C%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E"],[91,"impl-From%3CScalar%3E-for-GenericArray%3Cu8,+%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E"],[92,"impl-From%3C%26Scalar%3E-for-GenericArray%3Cu8,+%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E"],[93,"impl-From%3C%26ProjectivePoint%3E-for-AffinePoint"],[94,"impl-From%3CProjectivePoint%3E-for-AffinePoint"],[96,"impl-From%3CPublicKey%3CSecp256k1%3E%3E-for-AffinePoint"],[97,"impl-From%3C%26PublicKey%3CSecp256k1%3E%3E-for-AffinePoint"],[98,"impl-From%3C%26PublicKey%3CSecp256k1%3E%3E-for-ProjectivePoint"],[100,"impl-From%3CPublicKey%3CSecp256k1%3E%3E-for-ProjectivePoint"],[101,"impl-From%3C%26AffinePoint%3E-for-ProjectivePoint"],[102,"impl-From%3CAffinePoint%3E-for-ProjectivePoint"],[103,"impl-From%3Cu128%3E-for-Scalar"],[104,"impl-From%3Cu64%3E-for-Scalar"],[105,"impl-From%3Cu32%3E-for-Scalar"],[107,"impl-From%3C%26ScalarPrimitive%3CSecp256k1%3E%3E-for-Scalar"],[108,"impl-From%3CScalarPrimitive%3CSecp256k1%3E%3E-for-Scalar"],[110,"impl-From%3CScalar%3E-for-Uint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E"],[111,"impl-From%3C%26Scalar%3E-for-Uint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E"],[123,"impl-ProjectivePoint"],[124,"impl-Group-for-ProjectivePoint"],[126,"impl-ProjectivePoint"],[127,"impl-Group-for-ProjectivePoint"],[132,"impl-Invert-for-Scalar"],[133,"impl-Field-for-Scalar"],[134,"impl-Scalar"],[143,"impl-Mul%3CScalar%3E-for-AffinePoint"],[144,"impl-Mul%3C%26Scalar%3E-for-AffinePoint"],[145,"impl-Mul%3C%26Scalar%3E-for-ProjectivePoint"],[146,"impl-Mul%3C%26Scalar%3E-for-%26ProjectivePoint"],[147,"impl-Mul%3CScalar%3E-for-ProjectivePoint"],[148,"impl-Mul%3C%26Scalar%3E-for-%26Scalar"],[149,"impl-Mul%3C%26Scalar%3E-for-Scalar"],[150,"impl-Mul-for-Scalar"],[151,"impl-Scalar"],[152,"impl-MulAssign%3C%26Scalar%3E-for-ProjectivePoint"],[153,"impl-MulAssign%3CScalar%3E-for-ProjectivePoint"],[154,"impl-MulAssign%3C%26Scalar%3E-for-Scalar"],[155,"impl-MulAssign-for-Scalar"],[158,"impl-Neg-for-ProjectivePoint"],[159,"impl-Neg-for-%26ProjectivePoint"],[160,"impl-Neg-for-%26Scalar"],[161,"impl-Neg-for-Scalar"],[165,"impl-Product%3C%26Scalar%3E-for-Scalar"],[166,"impl-Product-for-Scalar"],[169,"impl-Reduce%3CUint%3Ccrypto_bigint::::uint::U512::%7Bconstant%230%7D%3E%3E-for-Scalar"],[170,"impl-Reduce%3CUint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E%3E-for-Scalar"],[171,"impl-Reduce%3CUint%3Ccrypto_bigint::::uint::U512::%7Bconstant%230%7D%3E%3E-for-Scalar"],[172,"impl-Reduce%3CUint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E%3E-for-Scalar"],[173,"impl-ReduceNonZero%3CUint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E%3E-for-Scalar"],[174,"impl-ReduceNonZero%3CUint%3Ccrypto_bigint::::uint::U512::%7Bconstant%230%7D%3E%3E-for-Scalar"],[175,"impl-ReduceNonZero%3CUint%3Ccrypto_bigint::::uint::U256::%7Bconstant%230%7D%3E%3E-for-Scalar"],[176,"impl-ReduceNonZero%3CUint%3Ccrypto_bigint::::uint::U512::%7Bconstant%230%7D%3E%3E-for-Scalar"],[178,"impl-Shr%3Cusize%3E-for-Scalar"],[179,"impl-Shr%3Cusize%3E-for-%26Scalar"],[184,"impl-Field-for-Scalar"],[185,"impl-Scalar"],[186,"impl-Sub%3C%26AffinePoint%3E-for-ProjectivePoint"],[187,"impl-Sub%3C%26AffinePoint%3E-for-%26ProjectivePoint"],[188,"impl-Sub%3CAffinePoint%3E-for-ProjectivePoint"],[189,"impl-Sub%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[190,"impl-Sub-for-ProjectivePoint"],[191,"impl-Sub%3C%26ProjectivePoint%3E-for-%26ProjectivePoint"],[192,"impl-Sub-for-Scalar"],[193,"impl-Sub%3C%26Scalar%3E-for-Scalar"],[194,"impl-Sub%3C%26Scalar%3E-for-%26Scalar"],[195,"impl-Scalar"],[196,"impl-SubAssign-for-ProjectivePoint"],[197,"impl-SubAssign%3CAffinePoint%3E-for-ProjectivePoint"],[198,"impl-SubAssign%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[199,"impl-SubAssign%3C%26AffinePoint%3E-for-ProjectivePoint"],[200,"impl-SubAssign-for-Scalar"],[201,"impl-SubAssign%3C%26Scalar%3E-for-Scalar"],[202,"impl-Sum-for-ProjectivePoint"],[203,"impl-Sum%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[204,"impl-Sum-for-Scalar"],[205,"impl-Sum%3C%26Scalar%3E-for-Scalar"],[206,"impl-ProjectivePoint"],[207,"impl-Curve-for-ProjectivePoint"],[219,"impl-TryFrom%3C%26AffinePoint%3E-for-PublicKey%3CSecp256k1%3E"],[220,"impl-TryFrom%3CAffinePoint%3E-for-PublicKey%3CSecp256k1%3E"],[221,"impl-TryFrom%3C%26ProjectivePoint%3E-for-PublicKey%3CSecp256k1%3E"],[222,"impl-TryFrom%3CProjectivePoint%3E-for-PublicKey%3CSecp256k1%3E"],[224,"impl-TryFrom%3CEncodedPoint%3C%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E%3E-for-AffinePoint"],[225,"impl-TryFrom%3C%26EncodedPoint%3C%3CSecp256k1+as+Curve%3E::FieldBytesSize%3E%3E-for-AffinePoint"],[261,"impl-Display-for-Error"],[262,"impl-Debug-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
