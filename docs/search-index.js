var searchIndex = new Map(JSON.parse('[\
["daosign_app",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["daosign_eip712",{"doc":"","t":"SFFFFKNNNNNNNNONNNNNNNNNNNNOHNNNNNNNNNNNHNNNNOOOMNOHNNNNHNNNNNNNNNNNONNNNOOONNN","n":["CONTRACT_SOURCE_METADATA","EIP712Domain","EIP712DomainExt","EIP712Message","EIP712PropertyType","Packable","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_id","clone","clone","clone","clone_into","clone_into","clone_into","contract_source_metadata","contract_source_metadata","deserialize","deserialize","deserialize_reader","deserialize_reader","domain","eip712_domain_type","eq","eq","eq","ext","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","message","name","name","pack","pack","primary_type","recover","serialize","serialize","serialize","serialize","sha3","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","types","verifying_contract","version","with_attached_deposit","with_static_gas","with_unused_gas_weight"],"q":[[0,"daosign_eip712"],[79,"core::clone"],[80,"near_sdk::promise"],[81,"core::result"],[82,"serde::de"],[83,"std::io::error"],[84,"std::io"],[85,"alloc::vec"],[86,"core::cmp"],[87,"near_account_id::account_id"],[88,"core::fmt"],[89,"core::fmt"],[90,"core::any"],[91,"near_token"],[92,"near_gas"]],"d":["","","","","EIP712PropertyType struct representing the structure of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","API for calling this contract’s functions in a …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,7,2,3,1,7,2,3,2,1,2,3,1,2,3,7,2,1,2,1,2,3,0,1,2,3,2,1,2,3,1,7,2,3,0,1,7,2,3,3,1,2,5,2,3,0,1,1,2,2,0,1,2,3,1,7,2,3,1,7,2,3,1,1,7,2,3,3,2,2,7,7,7],"f":"``````{ce{}{}}0000000`{bb}{dd}{{{f{c}}}{{f{c}}}{hj}}{{ce}l{}{}}00{nA`}{{}l}{c{{Ab{b}}}Ad}{c{{Ab{d}}}Ad}{c{{Ab{bAf}}}Ah}{c{{Ab{dAf}}}Ah}`{{}{{Aj{b}}}}{{bb}Al}{{dd}Al}{{{f{c}}{f{c}}}Al{Anj}}{B`n}{{bBb}Bd}{{dBb}Bd}{{{f{c}}Bb}Bd{Bfj}}{cc{}}000{j{{Bj{Bh}}}}{ce{}{}}000```{j{{Aj{Bh}}}}{d{{Aj{Bh}}}}`{{dj{Bj{Bh}}}{{Ab{{Bj{Bh}}Af}}}}{{bc}{{Ab{lAf}}}Bl}{{bc}AbBn}{{dc}{{Ab{lAf}}}Bl}{{dc}AbBn}{{{C`{Bh}}}{{Bj{Bh}}}}888{c{{Ab{e}}}{}{}}0000000`{cCb{}}000```{{nCd}n}{{nCf}n}{{nCh}n}","c":[],"p":[[5,"EIP712PropertyType",0],[5,"EIP712Domain",0],[5,"EIP712Message",0],[10,"Clone",79],[10,"Packable",0],[1,"unit"],[5,"EIP712DomainExt",0],[5,"Promise",80],[6,"Result",81],[10,"Deserializer",82],[5,"Error",83],[10,"Read",84],[5,"Vec",85],[1,"bool"],[10,"PartialEq",86],[5,"AccountId",87],[5,"Formatter",88],[8,"Result",88],[10,"Debug",88],[1,"u8"],[1,"array"],[10,"Write",84],[10,"Serializer",89],[1,"slice"],[5,"TypeId",90],[5,"NearToken",91],[5,"NearGas",92],[1,"u64"]],"b":[[52,"impl-BorshSerialize-for-EIP712PropertyType"],[53,"impl-Serialize-for-EIP712PropertyType"],[54,"impl-BorshSerialize-for-EIP712Domain"],[55,"impl-Serialize-for-EIP712Domain"]]}],\
["daosign_proof_of_agreement",{"doc":"","t":"SFFONNNNNNNNNNNNNNNNNONNNOONNNNNNNNNNN","n":["CONTRACT_SOURCE_METADATA","ProofOfAgreement","ProofOfAgreementExt","authority_cid","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contract_source_metadata","contract_source_metadata","deserialize","deserialize_reader","eq","ext","fmt","from","from","into","into","metadata","pack","serialize","serialize","signature_cids","timestamp","to_eip712_message","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_attached_deposit","with_static_gas","with_unused_gas_weight"],"q":[[0,"daosign_proof_of_agreement"],[38,"near_sdk::promise"],[39,"core::result"],[40,"serde::de"],[41,"std::io::error"],[42,"std::io"],[43,"near_account_id::account_id"],[44,"core::fmt"],[45,"core::fmt"],[46,"serde::ser"],[47,"std::io"],[48,"daosign_eip712"],[49,"near_token"],[50,"near_gas"]],"d":["","ProofOfAgreement struct representing the …","","","","","","","","","","","","","","API for calling this contract’s functions in a …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,3,3,3],"f":"````{ce{}{}}000{bb}{{ce}d{}{}}{fh}{{}d}{c{{j{b}}}l}{c{{j{bn}}}A`}{{bb}Ab}{Adf}{{bAf}Ah}{cc{}}0::`{b{{Al{Aj}}}}{{bc}jAn}{{bc}{{j{dn}}}B`}``{{bBb}{{Bd{b}}}}>{c{{j{e}}}{}{}}000{cBf{}}0{{fBh}f}{{fBj}f}{{fBl}f}","c":[],"p":[[5,"ProofOfAgreement",0],[1,"unit"],[5,"ProofOfAgreementExt",0],[5,"Promise",38],[6,"Result",39],[10,"Deserializer",40],[5,"Error",41],[10,"Read",42],[1,"bool"],[5,"AccountId",43],[5,"Formatter",44],[8,"Result",44],[1,"u8"],[5,"Vec",45],[10,"Serializer",46],[10,"Write",42],[5,"EIP712Domain",47],[5,"EIP712Message",47],[5,"TypeId",48],[5,"NearToken",49],[5,"NearGas",50],[1,"u64"]],"b":[[23,"impl-Serialize-for-ProofOfAgreement"],[24,"impl-BorshSerialize-for-ProofOfAgreement"]]}],\
["daosign_proof_of_authority",{"doc":"","t":"SFFFOONNNNNNNNNNNNNNNNNNNNNNNNONNNOOONNHNNNNHOONNNNNNNNNNNNNNN","n":["CONTRACT_SOURCE_METADATA","ProofOfAuthority","ProofOfAuthorityExt","Signer","addr","agreement_cid","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contract_source_metadata","contract_source_metadata","deserialize","deserialize","deserialize_reader","deserialize_reader","eq","eq","ext","fmt","fmt","from","from","from","from","into","into","into","metadata","metadata","name","pack","pack","proof_of_authority_type","serialize","serialize","serialize","serialize","signer_type","signers","timestamp","to_eip712_message","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_attached_deposit","with_static_gas","with_unused_gas_weight"],"q":[[0,"daosign_proof_of_authority"],[62,"near_sdk::promise"],[63,"core::result"],[64,"serde::de"],[65,"std::io::error"],[66,"std::io"],[67,"near_account_id::account_id"],[68,"core::fmt"],[69,"core::fmt"],[70,"daosign_eip712"],[71,"serde::ser"],[72,"std::io"],[73,"near_token"],[74,"near_gas"]],"d":["","ProofOfAuthority struct representing the …","","Signer struct representing an address and associated …","","","","","","","","","","","","","","","","","","","","","API for calling this contract’s functions in a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,1,4,2,1,4,2,1,2,1,2,4,2,1,2,1,2,1,2,2,1,2,1,4,2,2,1,4,2,1,2,2,1,2,0,1,1,2,2,0,2,2,2,1,2,1,4,2,1,4,2,1,4,2,4,4,4],"f":"``````{ce{}{}}00000{bb}{dd}{{ce}f{}{}}0{hj}{{}f}{c{{l{b}}}n}{c{{l{d}}}n}{c{{l{bA`}}}Ab}{c{{l{dA`}}}Ab}{{bb}Ad}{{dd}Ad}{Afh}{{bAh}Aj}{{dAh}Aj}{cc{}}00`???```{b{{An{Al}}}}{d{{An{Al}}}}{{}{{An{B`}}}}{{bc}lBb}{{bc}{{l{fA`}}}Bd}{{dc}lBb}{{dc}{{l{fA`}}}Bd}4``{{dBf}{{Bh{d}}}}{ce{}{}}0{c{{l{e}}}{}{}}00000{cBj{}}00{{hBl}h}{{hBn}h}{{hC`}h}","c":[],"p":[[5,"Signer",0],[5,"ProofOfAuthority",0],[1,"unit"],[5,"ProofOfAuthorityExt",0],[5,"Promise",62],[6,"Result",63],[10,"Deserializer",64],[5,"Error",65],[10,"Read",66],[1,"bool"],[5,"AccountId",67],[5,"Formatter",68],[8,"Result",68],[1,"u8"],[5,"Vec",69],[5,"EIP712PropertyType",70],[10,"Serializer",71],[10,"Write",66],[5,"EIP712Domain",70],[5,"EIP712Message",70],[5,"TypeId",72],[5,"NearToken",73],[5,"NearGas",74],[1,"u64"]],"b":[[40,"impl-Serialize-for-Signer"],[41,"impl-BorshSerialize-for-Signer"],[42,"impl-Serialize-for-ProofOfAuthority"],[43,"impl-BorshSerialize-for-ProofOfAuthority"]]}],\
["daosign_proof_of_signature",{"doc":"","t":"SFFONNNNNNNNNNNNNNNNNOONNNOONNNNNNNNNNN","n":["CONTRACT_SOURCE_METADATA","ProofOfSignature","ProofOfSignatureExt","authority_cid","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","contract_source_metadata","contract_source_metadata","deserialize","deserialize_reader","eq","ext","fmt","from","from","into","into","metadata","name","pack","serialize","serialize","signer","timestamp","to_eip712_message","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_attached_deposit","with_static_gas","with_unused_gas_weight"],"q":[[0,"daosign_proof_of_signature"],[39,"near_sdk::promise"],[40,"core::result"],[41,"serde::de"],[42,"std::io::error"],[43,"std::io"],[44,"near_account_id::account_id"],[45,"core::fmt"],[46,"core::fmt"],[47,"serde::ser"],[48,"std::io"],[49,"daosign_eip712"],[50,"near_token"],[51,"near_gas"]],"d":["","ProofOfSignature struct representing the …","","","","","","","","","","","","","","API for calling this contract’s functions in a …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,3,3,3],"f":"````{ce{}{}}000{bb}{{ce}d{}{}}{fh}{{}d}{c{{j{b}}}l}{c{{j{bn}}}A`}{{bb}Ab}{Adf}{{bAf}Ah}{cc{}}0::``{b{{Al{Aj}}}}{{bc}jAn}{{bc}{{j{dn}}}B`}``{{bBb}{{Bd{b}}}}>{c{{j{e}}}{}{}}000{cBf{}}0{{fBh}f}{{fBj}f}{{fBl}f}","c":[],"p":[[5,"ProofOfSignature",0],[1,"unit"],[5,"ProofOfSignatureExt",0],[5,"Promise",39],[6,"Result",40],[10,"Deserializer",41],[5,"Error",42],[10,"Read",43],[1,"bool"],[5,"AccountId",44],[5,"Formatter",45],[8,"Result",45],[1,"u8"],[5,"Vec",46],[10,"Serializer",47],[10,"Write",43],[5,"EIP712Domain",48],[5,"EIP712Message",48],[5,"TypeId",49],[5,"NearToken",50],[5,"NearGas",51],[1,"u64"]],"b":[[24,"impl-Serialize-for-ProofOfSignature"],[25,"impl-BorshSerialize-for-ProofOfSignature"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
