var searchIndex = new Map(JSON.parse('[\
["daosign_app",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["daosign_eip712",{"doc":"","t":"FFFKNNNNNNNNNONNNNNNNNNNOHNNNNNNNNNHNNNNOOOMNOHNNNNNNHNNNNNNNNNONNNOOO","n":["EIP712Domain","EIP712Message","EIP712PropertyType","Packable","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain_id","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize_reader","deserialize_reader","domain","eip712_domain_type","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","json_schema","message","name","name","pack","pack","primary_type","recover","schema_id","schema_name","serialize","serialize","serialize","serialize","sha3","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type","type_id","type_id","type_id","types","verifying_contract","version"],"q":[[0,"daosign_eip712"],[70,"dyn_clone::sealed"],[71,"core::clone"],[72,"core::result"],[73,"serde::de"],[74,"std::io::error"],[75,"std::io"],[76,"alloc::vec"],[77,"core::cmp"],[78,"core::fmt"],[79,"core::fmt"],[80,"schemars::schema"],[81,"alloc::borrow"],[82,"alloc::string"],[83,"std::io"],[84,"core::any"]],"d":["","","EIP712PropertyType struct representing the structure of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,3,4,5,3,4,5,3,4,5,4,3,4,5,3,4,5,3,4,3,4,5,0,3,4,5,3,4,5,3,4,5,0,3,4,5,4,5,3,4,7,4,5,0,4,4,3,3,4,4,0,3,4,5,3,4,5,3,4,5,3,3,4,5,5,4,4],"f":"````{{cb}d{}}00{ce{}{}}00000`{ff}{hh}{{{j{c}}}{{j{c}}}{ln}}{{ce}d{}{}}00{c{{A`{f}}}Ab}{c{{A`{h}}}Ab}{c{{A`{fAd}}}Af}{c{{A`{hAd}}}Af}`{{}{{Ah{f}}}}{{ff}Aj}{{hh}Aj}{{{j{c}}{j{c}}}Aj{Aln}}{{fAn}B`}{{hAn}B`}{{{j{c}}An}B`{Bbn}}{cc{}}00{n{{Bf{Bd}}}}{ce{}{}}00{BhBj}```{n{{Ah{Bd}}}}{h{{Ah{Bd}}}}`{{hn{Bf{Bd}}}{{A`{{Bf{Bd}}Ad}}}}{{}{{Bn{Bl}}}}{{}C`}{{fc}{{A`{dAd}}}Cb}{{fc}A`Cd}{{hc}{{A`{dAd}}}Cb}{{hc}A`Cd}{{{Cf{Bd}}}{{Bf{Bd}}}};;;{c{{A`{e}}}{}{}}00000`{cCh{}}00```","c":[],"p":[[5,"Private",70],[1,"unit"],[5,"EIP712PropertyType",0],[5,"EIP712Domain",0],[5,"EIP712Message",0],[10,"Clone",71],[10,"Packable",0],[6,"Result",72],[10,"Deserializer",73],[5,"Error",74],[10,"Read",75],[5,"Vec",76],[1,"bool"],[10,"PartialEq",77],[5,"Formatter",78],[8,"Result",78],[10,"Debug",78],[1,"u8"],[1,"array"],[5,"SchemaGenerator",79],[6,"Schema",80],[1,"str"],[6,"Cow",81],[5,"String",82],[10,"Write",75],[10,"Serializer",83],[1,"slice"],[5,"TypeId",84]],"b":[[49,"impl-BorshSerialize-for-EIP712PropertyType"],[50,"impl-Serialize-for-EIP712PropertyType"],[51,"impl-BorshSerialize-for-EIP712Domain"],[52,"impl-Serialize-for-EIP712Domain"]]}],\
["daosign_proof_of_agreement",{"doc":"","t":"FNONNNNNNNNNNNONNNNNOONNNNN","n":["ProofOfAgreement","__clone_box","authority_cid","borrow","borrow_mut","clone","clone_into","deserialize","deserialize_reader","eq","fmt","from","into","json_schema","metadata","pack","schema_id","schema_name","serialize","serialize","signature_cids","timestamp","to_eip712_message","to_owned","try_from","try_into","type_id"],"q":[[0,"daosign_proof_of_agreement"],[27,"dyn_clone::sealed"],[28,"core::result"],[29,"serde::de"],[30,"std::io::error"],[31,"std::io"],[32,"core::fmt"],[33,"core::fmt"],[34,"schemars::schema"],[35,"alloc::vec"],[36,"alloc::borrow"],[37,"alloc::string"],[38,"serde::ser"],[39,"std::io"],[40,"daosign_eip712"]],"d":["ProofOfAgreement struct representing the …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":"`{{cb}d{}}`{ce{}{}}0{ff}{{ce}d{}{}}{c{{h{f}}}j}{c{{h{fl}}}n}{{ff}A`}{{fAb}Ad}{cc{}}7{AfAh}`{f{{Al{Aj}}}}{{}{{B`{An}}}}{{}Bb}{{fc}hBd}{{fc}{{h{dl}}}Bf}``{{fBh}{{Bj{f}}}}>{c{{h{e}}}{}{}}0{cBl{}}","c":[],"p":[[5,"Private",27],[1,"unit"],[5,"ProofOfAgreement",0],[6,"Result",28],[10,"Deserializer",29],[5,"Error",30],[10,"Read",31],[1,"bool"],[5,"Formatter",32],[8,"Result",32],[5,"SchemaGenerator",33],[6,"Schema",34],[1,"u8"],[5,"Vec",35],[1,"str"],[6,"Cow",36],[5,"String",37],[10,"Serializer",38],[10,"Write",31],[5,"EIP712Domain",39],[5,"EIP712Message",39],[5,"TypeId",40]],"b":[[18,"impl-Serialize-for-ProofOfAgreement"],[19,"impl-BorshSerialize-for-ProofOfAgreement"]]}],\
["daosign_proof_of_authority",{"doc":"","t":"FFNNOONNNNNNNNNNNNNNNNNNONNNNOOONNHNNNNNNNNHOONNNNNNNNN","n":["ProofOfAuthority","Signer","__clone_box","__clone_box","addr","agreement_cid","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","deserialize_reader","deserialize_reader","eq","eq","fmt","fmt","from","from","from","into","into","json_schema","json_schema","metadata","metadata","name","pack","pack","proof_of_authority_type","schema_id","schema_id","schema_name","schema_name","serialize","serialize","serialize","serialize","signer_type","signers","timestamp","to_eip712_message","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"daosign_proof_of_authority"],[55,"dyn_clone::sealed"],[56,"core::result"],[57,"serde::de"],[58,"std::io::error"],[59,"std::io"],[60,"core::fmt"],[61,"core::fmt"],[62,"schemars::schema"],[63,"alloc::vec"],[64,"daosign_eip712"],[65,"alloc::borrow"],[66,"alloc::string"],[67,"serde::ser"],[68,"std::io"]],"d":["ProofOfAuthority struct representing the …","Signer struct representing an address and associated …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,4,3,4,0,3,4,3,4,3,3,4,4,0,4,4,4,3,4,3,4,3,4,3,4],"f":"``{{cb}d{}}0``{ce{}{}}000{ff}{hh}{{ce}d{}{}}0{c{{j{f}}}l}{c{{j{h}}}l}{c{{j{fn}}}A`}{c{{j{hn}}}A`}{{ff}Ab}{{hh}Ab}{{fAd}Af}{{hAd}Af}{cc{}}0`<<{AhAj}0```{f{{An{Al}}}}{h{{An{Al}}}}{{}{{An{B`}}}}{{}{{Bd{Bb}}}}0{{}Bf}0{{fc}jBh}{{fc}{{j{dn}}}Bj}{{hc}{{j{dn}}}Bj}{{hc}jBh}6``{{hBl}{{Bn{h}}}}{ce{}{}}0{c{{j{e}}}{}{}}000{cC`{}}0","c":[],"p":[[5,"Private",55],[1,"unit"],[5,"Signer",0],[5,"ProofOfAuthority",0],[6,"Result",56],[10,"Deserializer",57],[5,"Error",58],[10,"Read",59],[1,"bool"],[5,"Formatter",60],[8,"Result",60],[5,"SchemaGenerator",61],[6,"Schema",62],[1,"u8"],[5,"Vec",63],[5,"EIP712PropertyType",64],[1,"str"],[6,"Cow",65],[5,"String",66],[10,"Serializer",67],[10,"Write",59],[5,"EIP712Domain",64],[5,"EIP712Message",64],[5,"TypeId",68]],"b":[[39,"impl-Serialize-for-Signer"],[40,"impl-BorshSerialize-for-Signer"],[41,"impl-BorshSerialize-for-ProofOfAuthority"],[42,"impl-Serialize-for-ProofOfAuthority"]]}],\
["daosign_proof_of_signature",{"doc":"","t":"FNONNNNNNNNNNNOONNNNNOONNNNN","n":["ProofOfSignature","__clone_box","authority_cid","borrow","borrow_mut","clone","clone_into","deserialize","deserialize_reader","eq","fmt","from","into","json_schema","metadata","name","pack","schema_id","schema_name","serialize","serialize","signer","timestamp","to_eip712_message","to_owned","try_from","try_into","type_id"],"q":[[0,"daosign_proof_of_signature"],[28,"dyn_clone::sealed"],[29,"core::result"],[30,"serde::de"],[31,"std::io::error"],[32,"std::io"],[33,"core::fmt"],[34,"core::fmt"],[35,"schemars::schema"],[36,"alloc::vec"],[37,"alloc::borrow"],[38,"alloc::string"],[39,"serde::ser"],[40,"std::io"],[41,"daosign_eip712"]],"d":["ProofOfSignature struct representing the …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":"`{{cb}d{}}`{ce{}{}}0{ff}{{ce}d{}{}}{c{{h{f}}}j}{c{{h{fl}}}n}{{ff}A`}{{fAb}Ad}{cc{}}7{AfAh}``{f{{Al{Aj}}}}{{}{{B`{An}}}}{{}Bb}{{fc}hBd}{{fc}{{h{dl}}}Bf}``{{fBh}{{Bj{f}}}}>{c{{h{e}}}{}{}}0{cBl{}}","c":[],"p":[[5,"Private",28],[1,"unit"],[5,"ProofOfSignature",0],[6,"Result",29],[10,"Deserializer",30],[5,"Error",31],[10,"Read",32],[1,"bool"],[5,"Formatter",33],[8,"Result",33],[5,"SchemaGenerator",34],[6,"Schema",35],[1,"u8"],[5,"Vec",36],[1,"str"],[6,"Cow",37],[5,"String",38],[10,"Serializer",39],[10,"Write",32],[5,"EIP712Domain",40],[5,"EIP712Message",40],[5,"TypeId",41]],"b":[[19,"impl-Serialize-for-ProofOfSignature"],[20,"impl-BorshSerialize-for-ProofOfSignature"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
